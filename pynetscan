#!/usr/bin/python3

from concurrent.futures import ThreadPoolExecutor
import time
from subprocess import Popen, PIPE, TimeoutExpired
from threading import Lock
import re


ips = []
progress = 0
thread_lock = Lock()
INVALID_IP_ADRESSES = ["127.0.0.1", "172.17.0.1", "172.18.0.1"]


# progress bar from https://stackoverflow.com/a/34325723/7447040
# Print iterations progress
def printProgressBar(iteration, total, prefix='', suffix='', decimals=1, length=100, fill='â–ˆ'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end='\r')
    # Print New Line on Complete
    if iteration == total:
        print()


def task(ip_address):
    global ips
    shell = Popen(["ping", ip_address, "-c", "1"], stdout=PIPE)
    with thread_lock:
        global progress
        progress += 1
    try:
        shell.communicate(timeout=0.15)
        ips.append(ip_address)
    except TimeoutExpired:
        return

if __name__ == "__main__":

    # execute "ifconfig" in shell
    shell = Popen(["ifconfig"], stdout=PIPE)
    shell_result = shell.stdout.read().decode("utf-8")

    # execute a regex on ifconfig result to find all ip adresses
    regex_result = re.findall(r'inet (?:addr){0,1}((?:(?:\d){1,3}.){3}(?:\d){1,3})', shell_result)

    # filter out invalid ip adresses
    local_ips = list(filter(lambda ip_adress: ip_adress not in INVALID_IP_ADRESSES, regex_result))

    print(f"local ip addresses: {local_ips}")

    for local_ip in local_ips:
        subnet_mask = re.match(r'(?:[0-9]{1,3}\.){3}', local_ip).group(0)
        print(subnet_mask)
        t1 = time.time()
        with ThreadPoolExecutor() as thread_pool:
            for i in range(1, 255):
                thread_pool.submit(task, subnet_mask + str(i))

            while(progress < 254):
                printProgressBar(progress, 254, prefix='Scanning Network:', length=50)
                time.sleep(0.1)
            printProgressBar(progress, 254, prefix='Scanning Network:', length=50)
        print(ips)
        print(f"time: {time.time()-t1}")
