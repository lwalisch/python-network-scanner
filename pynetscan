#!/usr/bin/python3

import subprocess
import re

INVALID_IP_ADRESSES = ["127.0.0.1", "172.17.0.1"]


def app() :

    # execute "ifconfig" in shell
    shell = subprocess.Popen(["ifconfig"], stdout=subprocess.PIPE)
    shell_result = shell.stdout.read().decode("utf-8")

    # execute a regex on ifconfig result to find all ip adresses
    regex_result = re.findall(r'inet (?:addr){0,1}((?:(?:\d){1,3}.){3}(?:\d){1,3})', shell_result)

    # filter out invalid ip adresses
    local_ips= list(filter(lambda ip_adress: ip_adress not in INVALID_IP_ADRESSES, regex_result))

    # create a subnet mask according to the valid ips and try to ping each host in the subnet
    network_hosts = []
    for local_ip in local_ips:
        subnet_mask = re.match(r'(?:[0-9]{1,3}\.){3}', local_ip).group(0)
        printProgressBar(0, 254, prefix = 'Scanning Network:', length = 50)
        for i in range(1, 255):
            ip = subnet_mask + str(i)
            shell = subprocess.Popen(["ping", ip, "-c", "1"], stdout=subprocess.PIPE)

            try:
                ping_result = shell.communicate(timeout=0.15)
                network_hosts.append(ip)
            except subprocess.TimeoutExpired:
                pass

            printProgressBar(i+1, 255, prefix = 'Scanning Network:', length = 50)

        print(network_hosts)

# progress bar from https://stackoverflow.com/a/34325723/7447040
# Print iterations progress
def printProgressBar (iteration, total, prefix = '', suffix = '', decimals = 1, length = 100, fill = 'â–ˆ'):
    """
    Call in a loop to create terminal progress bar
    @params:
        iteration   - Required  : current iteration (Int)
        total       - Required  : total iterations (Int)
        prefix      - Optional  : prefix string (Str)
        suffix      - Optional  : suffix string (Str)
        decimals    - Optional  : positive number of decimals in percent complete (Int)
        length      - Optional  : character length of bar (Int)
        fill        - Optional  : bar fill character (Str)
    """
    percent = ("{0:." + str(decimals) + "f}").format(100 * (iteration / float(total)))
    filledLength = int(length * iteration // total)
    bar = fill * filledLength + '-' * (length - filledLength)
    print('\r%s |%s| %s%% %s' % (prefix, bar, percent, suffix), end = '\r')
    # Print New Line on Complete
    if iteration == total:
        print()

if __name__ == "__main__":
    app()
